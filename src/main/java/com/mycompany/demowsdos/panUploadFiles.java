/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.demowsdos;

import Models.ProductLine;
import com.company.wsdl.BasicHttpBinding_IServiceStub;
import com.company.wsdl.Getfiletypesresponse;
import com.company.wsdl.Getproductfilesresponse;
import com.company.wsdl.GetproductfilesresponseProductline;
import com.company.wsdl.GetproductfilesresponseProductlineProductfile;
import com.company.wsdl.Saveuploadrequest;
import com.company.wsdl.Saveuploadresponse;
import com.company.wsdl.ServiceLocator;
import java.io.BufferedInputStream;

import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.util.List;

import javax.swing.*;
import javax.xml.rpc.ServiceException;
import org.apache.axis.client.Stub;
//import javax.xml.rpc.ServiceFactory;

/**
 *
 * @author EduardoZetina
 */
public class panUploadFiles extends javax.swing.JPanel {
    private static final int GETFILETYPES = 1;
    private static final int UPLOADCHUNKS = 2;
    //global vaiables
    File selectFile;
    List<ProductLine> lstProducts = new ArrayList<>();
    

    
    
    //String[] strProLines = new String[100];
    //String[] strProFiles = new String[100];
    
    /**
     * Creates new form panUploadFiles
     */
    public panUploadFiles() {
        initComponents();
        //lstFilTyp.setModel(model);
        this.btnChoFile.setEnabled(false);
        this.btnImport.setEnabled(false);
        this.txtFile.setEditable(false);
        this.btnSaave.setEnabled(false);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtApiKey = new javax.swing.JTextField();
        btnSenGetFil = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResp = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbFilTyp = new javax.swing.JComboBox<>();
        btnChoFile = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbLines = new javax.swing.JComboBox<>();
        cmbProduct = new javax.swing.JComboBox<>();
        btnSaave = new javax.swing.JButton();

        jLabel1.setText("ApiKey:");

        txtApiKey.setToolTipText("Enter your Api Key");

        btnSenGetFil.setText("GetFilesType");
        btnSenGetFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSenGetFilActionPerformed(evt);
            }
        });

        txtResp.setColumns(20);
        txtResp.setRows(5);
        jScrollPane1.setViewportView(txtResp);

        jLabel4.setText("Response:");

        jLabel2.setText("File Type:");

        cmbFilTyp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilTypActionPerformed(evt);
            }
        });

        btnChoFile.setText("File ...");
        btnChoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoFileActionPerformed(evt);
            }
        });

        btnImport.setText("Upload file ...");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        jLabel5.setText("Product  lines:");

        jLabel6.setText("Product files:");

        cmbLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLinesActionPerformed(evt);
            }
        });

        btnSaave.setText("Upload file ..");
        btnSaave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnChoFile, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbLines, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnImport)
                            .addComponent(btnSaave))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSenGetFil)
                                    .addComponent(cmbFilTyp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(111, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(txtApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSenGetFil)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFilTyp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChoFile)
                            .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cmbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport))
                .addGap(53, 53, 53))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSenGetFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSenGetFilActionPerformed
     if(txtApiKey.getText().isEmpty()){
         JOptionPane.showMessageDialog(this, "The Api Key is missing");
         
     }else{
        this.txtResp.setText("Getting types... \n" );
        connectToService(GETFILETYPES);
     }
         


    }//GEN-LAST:event_btnSenGetFilActionPerformed

    private void btnChoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoFileActionPerformed
        
       
        JFileChooser choFiler = new JFileChooser();
        int selection=choFiler.showOpenDialog(this);
        //int selection=choFiler.APROVE_OPTION;
        //choFiler.showOpenDialog(null);
        
        if(selection==choFiler.APPROVE_OPTION){
            selectFile= choFiler.getSelectedFile();
            this.txtFile.setText(selectFile.getAbsolutePath());
            this.btnSaave.setEnabled(true);

        }
        else{
            this.txtFile.setText("");
            this.btnSaave.setEnabled(false);

        }
        
        
    }//GEN-LAST:event_btnChoFileActionPerformed

    private void cmbFilTypActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilTypActionPerformed
        if(this.cmbFilTyp.getSelectedIndex() >0)
        {
            this.btnChoFile.setEnabled(true);
        }
        else
        {
            this.btnChoFile.setEnabled(false);
        }
        
    }//GEN-LAST:event_cmbFilTypActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        if (selectFile.isFile())
        {
            this.txtResp.setText(this.txtResp.getText() + "Uploading file, please wait ... \n" );
            connectToService(UPLOADCHUNKS);
            
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void cmbLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLinesActionPerformed
        
        
        cmbProduct.removeAllItems();
        cmbProduct.addItem("-- Select product file --");
        int intCount =0;
        for(ProductLine prod: lstProducts){
            
            if (prod.getstrLine()==cmbLines.getSelectedItem())
            {
                cmbProduct.addItem(prod.getstrFile());
                if (intCount==0)
                    cmbFilTyp.setSelectedItem(prod.getstrFileTyp());
                intCount++;
            }
            
        } 
        
    }//GEN-LAST:event_cmbLinesActionPerformed

    private void btnSaaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaaveActionPerformed
        if (selectFile.isFile())
        {
            this.txtResp.setText(this.txtResp.getText() + "Uploading file, please wait ... \n" );
            //size for 4MB  
            int bufferSize = 4194304;
            byte[]  byteArray = new byte[bufferSize];
            //set current position
            int intCurrPos = 0;
            //set position after read
            int intPos =0;
            try
            {        

               
               InputStream fr = new BufferedInputStream(new FileInputStream(selectFile));
               //get file size  
               int intLen = fr.available();
               //int intLen = (int) selectFile.length(); 

                while (intCurrPos<intLen) {
                    if (intLen<=bufferSize){
                        bufferSize = intLen;
                        byteArray = new byte[bufferSize];
                    }
                    
                    //int intInp = fr.read();
                    intPos = fr.read(byteArray, 0, byteArray.length);
                    if (intPos<0)
                        break;
                                       
                    uploadFile(byteArray, intCurrPos);       
                    intCurrPos = intCurrPos + intPos;

                }
                    
                fr.close();
                
               // JOptionPane.showMessageDialog(this, "el numero de vueltas que dio es: " + lnCount);

             } catch(IOException ex){
                txtResp.setText(this.txtResp.getText() + ex.getMessage() + ".\n");
            }
            

        }
    }//GEN-LAST:event_btnSaaveActionPerformed

private void connectToService (int intServ){
    try {
        try {
            URL url = new URL("https://opticat1.net/OBWS/Service.svc");
            ServiceLocator sl = new ServiceLocator();
            sl.getBasicHttpBinding_IService(url);
            BasicHttpBinding_IServiceStub stub = (BasicHttpBinding_IServiceStub) sl.getBasicHttpBinding_IService(url);
            
               switch (intServ)
               {
                   case 1:
                        Getfiletypesresponse response;
                        try {
                            response = stub.getFileTypes(this.txtApiKey.getText());
                            String status = response.getStatus() + ", " + response.getErrormessage();
                            this.txtResp.setText(this.txtResp.getText() + "Status: " + status + "\n");
                            //JOptionPane.showMessageDialog(this, "Status: " + status);
                            String[] strFilTyp = response.getFiletypes();
                            cmbFilTyp.removeAllItems();
                            cmbFilTyp.addItem("-- Select Type --");
                            for (String strType : strFilTyp) {
                                //fill cmbFilTyp
                                cmbFilTyp.addItem(strType);
                            }
                            
                            //managing controls
                            txtApiKey.setEditable(false);
                            btnSenGetFil.setEnabled(false);
                            btnChoFile.setEnabled(true);
                        }
                        catch (RemoteException ex) {
                            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                            this.txtResp.setText(this.txtResp.getText() + "Service error: " + ex.getMessage() + "\n" );
                        }
                        //fill lines
                       this.txtResp.setText(this.txtResp.getText() + "Gettin Lines ...\n");
                       Getproductfilesresponse responsePL;
;
                       try {
                            responsePL = stub.getProductFiles(this.txtApiKey.getText());
                            String status = responsePL.getStatus() + ", " + responsePL.getErrormessage();
                            this.txtResp.setText(this.txtResp.getText() + "Status: " + status + "\n");
                            cmbLines.removeAllItems();
                            cmbLines.addItem("-- Select Line --");
                        
                            cmbProduct.removeAllItems();
                            cmbProduct.addItem("-- Select product file --");

                           // JOptionPane.showMessageDialog(this, strName);
                            for (GetproductfilesresponseProductline strLine : responsePL.getProductlines()) {
                                //fill cmbLines
                                cmbLines.addItem(strLine.getName());
                                //strProLines[intLine]  =strLine.getName();
                                
                                for(GetproductfilesresponseProductlineProductfile strProd: strLine.getProductfiles()){
                                    //fill cmbProduct
                                    //strProFiles[intFile][2] = [strLine.getName()],[strProd.getValue()];
                                    ProductLine product = new ProductLine(strLine.getName(), strProd.getValue(), strProd.getFiletype());
                                    lstProducts.add(product);
                                    cmbProduct.addItem(strProd.getValue());
                                    //intFile++;
                                }                                
                            }     
                            
                            
                            this.txtResp.setText(this.txtResp.getText() + "To upload a file:\n");
                            this.txtResp.setText(this.txtResp.getText() + "  * Find and select the desired file\n");
                            this.txtResp.setText(this.txtResp.getText() + "  * Select the line and file of product\n");
                            //managing controls
                            txtApiKey.setEditable(false);
                            btnSenGetFil.setEnabled(false);
                            btnChoFile.setEnabled(true);
                        }catch (RemoteException ex) {
                            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                            this.txtResp.setText(this.txtResp.getText() + "Service error: " + ex.getMessage() + "\n");
                        }
                        break;
                   case 2:
                        //JOptionPane.showMessageDialog(this, this.cmbFilTyp.getSelectedItem().toString() + " ," + selectFile.getAbsoluteFile().toString());                  
                       // JOptionPane.showMessageDialog(this, selectFile.getAbsoluteFile().toString() + " ," + selectFile.getName().toString());
                       if (! this.txtFile.getText().isEmpty()) 
                       {
                        Saveuploadresponse responseUp;
                        try {
                            Saveuploadrequest params = new  Saveuploadrequest();
                            params.setApikey(this.txtApiKey.getText());
                            params.setFiletype(this.cmbFilTyp.getSelectedItem().toString());
                            params.setFilename(selectFile.getName().toString());
                            params.setProductfile(this.cmbProduct.getSelectedItem().toString());
                            params.setProductline(this.cmbLines.getSelectedItem().toString());
                            params.setChecksumalgo("");
                            params.setChecksumhex("");
                            responseUp = stub.saveUpload(params);
                           
                           String status = responseUp.getStatus() + ", " + responseUp.getErrormessage();
                           this.txtResp.setText(this.txtResp.getText() + "Status: " + status + "\n");

                        }
                        catch (RemoteException ex) {
                            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                            this.txtResp.setText(this.txtResp.getText() + "Service error: " + ex.getMessage() + "\n");
                        }
                       }
                       break;
                   default:
                        this.txtResp.setText(this.txtResp.getText() + "Processing ...\n" );
                        break;
                        
               }            
            }catch (MalformedURLException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                this.txtResp.setText(this.txtResp.getText() + "Service error: " + ex.getMessage() +"\n");
            }
        }catch (ServiceException  ex){
            this.txtResp.setText(this.txtResp.getText() + "Service error: " + ex.getMessage() + "\n");
        }
}
 
private void uploadFile (byte[]  byteArray, int intPos)
{
    try{   
        try{
            ServiceLocator sl = new ServiceLocator();
            URL url = new URL("https://opticat1.net/OBWS/Service.svc");
            sl.getBasicHttpBinding_IService(url);
            BasicHttpBinding_IServiceStub stub = (BasicHttpBinding_IServiceStub) sl.getBasicHttpBinding_IService(url);
            if (! this.txtFile.getText().isEmpty()) 
            {
                try {

                    String strResp = stub.uploadFileChunk(this.txtApiKey.getText(), selectFile.getName().toString(),  byteArray, intPos);
                    connectToService(UPLOADCHUNKS);
                    this.txtResp.setText(this.txtResp.getText() + "UploadFile: File " + selectFile.getName().toString() + " uploaded. \n");
                }
                catch (RemoteException ex) {
                    Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                    this.txtResp.setText("Service error: " + ex.getMessage() );
                }
            }
        }
            catch (MalformedURLException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                this.txtResp.setText("Service error: " + ex.getMessage() );
            }
        }catch (ServiceException  ex){
            this.txtResp.setText("Service error: " + ex.getMessage() );
    }

}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChoFile;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSaave;
    private javax.swing.JButton btnSenGetFil;
    private javax.swing.JComboBox<String> cmbFilTyp;
    private javax.swing.JComboBox<String> cmbLines;
    private javax.swing.JComboBox<String> cmbProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtApiKey;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextArea txtResp;
    // End of variables declaration//GEN-END:variables
}
